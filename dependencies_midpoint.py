import math
import numpy as np


def fidelity_cascaded_source(Ns,eA=1,eB=1,eD=1,Pd=0,vis=1):
    aux0=((22.+((-9.*eA)+(-9.*eB)))*Ns)+((56.+((-45.*eB)+(9.*(eA*(-5.+(4.*\
    eB))))))*(Ns**2));
    aux1=(-1.+eA)*((-1.+eB)*((eD**4.)*((Ns**2)*(8.+((-34.*Pd)+(35.*(Pd**2)\
    ))))));
    aux2=35.+((-187.*Pd)+((230.*(Pd**2))+(-4.*(eB*(8.+((-43.*Pd)+(53.*(\
    Pd**2))))))));
    aux3=(3.*(1.+((-5.*Pd)+(6.*(Pd**2)))))+(Ns*(35.+((-187.*Pd)+(230.*(\
    Pd**2)))));
    aux4=(-248.*(Ns*(Pd**2)))+((3.*(eA*(1.+((-5.*Pd)+(6.*(Pd**2))))))+((\
    eA*(Ns*aux2))+(eB*aux3)));
    aux5=(eD**3.)*(Ns*(-6.+((-38.*Ns)+((30.*Pd)+((202.*(Ns*Pd))+((-36.*(\
    Pd**2))+aux4))))));
    aux6=(3.*(eA*(1.+((-8.*Pd)+(13.*(Pd**2))))))+(3.*(eB*(1.+((-8.*Pd)+(\
    13.*(Pd**2))))));
    aux7=-38.+((328.*Pd)+((-542.*(Pd**2))+(8.*(eB*(4.+((-35.*Pd)+(58.*(\
    Pd**2))))))));
    aux8=(-382.*Pd)+((629.*(Pd**2))+((eB*(-38.+((328.*Pd)+(-542.*(Pd**2)))\
    ))+(eA*aux7)));
    aux9=(((1.+(-3.*Pd))**2))+((-2.*(Ns*(-7.+((54.*Pd)+((-87.*(Pd**2))+\
    aux6)))))+((Ns**2)*(45.+aux8)));
    aux10=(-2.*(eD*((2.+aux0)*(Pd*(-1.+(3.*Pd))))))+((4.*aux1)+((2.*aux5)+\
    ((eD**2)*aux9)));
    aux11=(4.*((-1.+((-4.+(3.*eA))*Ns))*((-1.+((-4.+(3.*eB))*Ns))*(Pd**2))\
    ))+aux10;
    aux12=(math.sqrt(((-(-1.+eA)*eA))))*((-1.+eD)*((Ns**2)*(math.sqrt(((1.+Ns)**-\
    1.)))));
    aux13=(-4.*((math.sqrt((1.-eA)))*aux12))+((math.sqrt(eA))*((math.sqrt(((Ns**2)*\
    ((1.+Ns)**-3.))))*(((1.+Ns)**2))));
    aux14=(math.sqrt((1.-eA)))*((math.sqrt(((-(-1.+eA)*eA))))*(math.sqrt(((Ns**2)*(\
    (1.+Ns)**-3.)))));
    aux15=(math.sqrt((1.-eA)))*((math.sqrt(((-(-1.+eA)*eA))))*(eD*(math.sqrt(((\
    Ns**2)*((1.+Ns)**-3.))))));
    aux16=(((1.+Ns)**2))*(((-4.*aux14)+(4.*aux15))-((math.sqrt(eA))*(math.sqrt((\
    (1.+Ns)**-1.)))));
    aux17=(-4.*((math.sqrt((1.-eB)))*((math.sqrt(((-(-1.+eB)*eB))))*((-1.+eD)*\
    aux13))))-((math.sqrt(eB))*aux16);
    aux18=(math.sqrt(eB))*((eD**2)*((Ns**2)*((((1.+Ns)**-1.)**7.5)*(aux17*(((\
    -1.+Pd)**4.)*vis)))));
    output=(0.25*(eA*(eB*((Ns**2)*(((1.+Ns)**-8.)*((((-1.+Pd)**2))*aux11))\
    ))))+(0.25*((math.sqrt(eA))*aux18));
    return output/trace_cascaded_source(Ns,eA,eB,eD,Pd)

def trace_cascaded_source(Ns,eA=1,eB=1,eD=1,Pd=0):
    aux0=eD*(Ns*((1.+((8.*Ns)+((22.*(Ns**2))+(24.*(Ns**3.)))))*(Pd*(-1.+(\
    3.*Pd)))));
    aux1=-2.*((eD**3.)*((Ns**3.)*((1.+(4.*Ns))*(2.+((-13.*Pd)+(17.*(Pd**2)\
    ))))));
    aux2=(2.*(Ns*(3.+((-34.*Pd)+(59.*(Pd**2))))))+((Ns**2)*(11.+((-122.*\
    Pd)+(211.*(Pd**2)))));
    aux3=(3.*((eD**4.)*((Ns**4.)*(2.+((-10.*Pd)+(11.*(Pd**2)))))))+(aux1+(\
    (eD**2)*((Ns**2)*(1.+((-12.*Pd)+((21.*(Pd**2))+aux2))))));
    aux4=(((-1.+Pd)**2))*(((((1.+((4.*Ns)+(6.*(Ns**2))))**2))*(Pd**2))+((-\
    2.*aux0)+aux3));
    output=((1.+Ns)**-8.)*aux4;
    return output


